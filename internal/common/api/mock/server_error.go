// Code generated by MockGen. DO NOT EDIT.
// Source: server_error.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServerErrorHandler is a mock of ServerErrorHandler interface.
type MockServerErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockServerErrorHandlerMockRecorder
}

// MockServerErrorHandlerMockRecorder is the mock recorder for MockServerErrorHandler.
type MockServerErrorHandlerMockRecorder struct {
	mock *MockServerErrorHandler
}

// NewMockServerErrorHandler creates a new mock instance.
func NewMockServerErrorHandler(ctrl *gomock.Controller) *MockServerErrorHandler {
	mock := &MockServerErrorHandler{ctrl: ctrl}
	mock.recorder = &MockServerErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerErrorHandler) EXPECT() *MockServerErrorHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockServerErrorHandler) Handle(endpoint string, w http.ResponseWriter, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", endpoint, w, err)
}

// Handle indicates an expected call of Handle.
func (mr *MockServerErrorHandlerMockRecorder) Handle(endpoint, w, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockServerErrorHandler)(nil).Handle), endpoint, w, err)
}
