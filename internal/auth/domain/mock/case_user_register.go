// Code generated by MockGen. DO NOT EDIT.
// Source: case_registration.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/art-es/blog/internal/auth/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockpasswordHashGenerator is a mock of passwordHashGenerator interface.
type MockpasswordHashGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockpasswordHashGeneratorMockRecorder
}

// MockpasswordHashGeneratorMockRecorder is the mock recorder for MockpasswordHashGenerator.
type MockpasswordHashGeneratorMockRecorder struct {
	mock *MockpasswordHashGenerator
}

// NewMockpasswordHashGenerator creates a new mock instance.
func NewMockpasswordHashGenerator(ctrl *gomock.Controller) *MockpasswordHashGenerator {
	mock := &MockpasswordHashGenerator{ctrl: ctrl}
	mock.recorder = &MockpasswordHashGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpasswordHashGenerator) EXPECT() *MockpasswordHashGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockpasswordHashGenerator) Generate(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockpasswordHashGeneratorMockRecorder) Generate(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockpasswordHashGenerator)(nil).Generate), password)
}

// MockactivationCodeSender is a mock of activationCodeSender interface.
type MockactivationCodeSender struct {
	ctrl     *gomock.Controller
	recorder *MockactivationCodeSenderMockRecorder
}

// MockactivationCodeSenderMockRecorder is the mock recorder for MockactivationCodeSender.
type MockactivationCodeSenderMockRecorder struct {
	mock *MockactivationCodeSender
}

// NewMockactivationCodeSender creates a new mock instance.
func NewMockactivationCodeSender(ctrl *gomock.Controller) *MockactivationCodeSender {
	mock := &MockactivationCodeSender{ctrl: ctrl}
	mock.recorder = &MockactivationCodeSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockactivationCodeSender) EXPECT() *MockactivationCodeSenderMockRecorder {
	return m.recorder
}

// SendCode mocks base method.
func (m *MockactivationCodeSender) SendCode(ctx context.Context, user *domain.User, tx domain.TxCommitter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCode", ctx, user, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCode indicates an expected call of SendCode.
func (mr *MockactivationCodeSenderMockRecorder) SendCode(ctx, user, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCode", reflect.TypeOf((*MockactivationCodeSender)(nil).SendCode), ctx, user, tx)
}
