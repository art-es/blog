// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_authenticate.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/art-es/blog/internal/auth/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockpasswordValidator is a mock of passwordValidator interface.
type MockpasswordValidator struct {
	ctrl     *gomock.Controller
	recorder *MockpasswordValidatorMockRecorder
}

// MockpasswordValidatorMockRecorder is the mock recorder for MockpasswordValidator.
type MockpasswordValidatorMockRecorder struct {
	mock *MockpasswordValidator
}

// NewMockpasswordValidator creates a new mock instance.
func NewMockpasswordValidator(ctrl *gomock.Controller) *MockpasswordValidator {
	mock := &MockpasswordValidator{ctrl: ctrl}
	mock.recorder = &MockpasswordValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpasswordValidator) EXPECT() *MockpasswordValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockpasswordValidator) Validate(password, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", password, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockpasswordValidatorMockRecorder) Validate(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockpasswordValidator)(nil).Validate), password, hash)
}

// MockaccessTokenIssuer is a mock of accessTokenIssuer interface.
type MockaccessTokenIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockaccessTokenIssuerMockRecorder
}

// MockaccessTokenIssuerMockRecorder is the mock recorder for MockaccessTokenIssuer.
type MockaccessTokenIssuerMockRecorder struct {
	mock *MockaccessTokenIssuer
}

// NewMockaccessTokenIssuer creates a new mock instance.
func NewMockaccessTokenIssuer(ctrl *gomock.Controller) *MockaccessTokenIssuer {
	mock := &MockaccessTokenIssuer{ctrl: ctrl}
	mock.recorder = &MockaccessTokenIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccessTokenIssuer) EXPECT() *MockaccessTokenIssuerMockRecorder {
	return m.recorder
}

// NewObject mocks base method.
func (m *MockaccessTokenIssuer) NewObject(userID int64) *domain.AccessTokenObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewObject", userID)
	ret0, _ := ret[0].(*domain.AccessTokenObject)
	return ret0
}

// NewObject indicates an expected call of NewObject.
func (mr *MockaccessTokenIssuerMockRecorder) NewObject(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewObject", reflect.TypeOf((*MockaccessTokenIssuer)(nil).NewObject), userID)
}

// Sign mocks base method.
func (m *MockaccessTokenIssuer) Sign(object *domain.AccessTokenObject) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", object)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockaccessTokenIssuerMockRecorder) Sign(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockaccessTokenIssuer)(nil).Sign), object)
}
