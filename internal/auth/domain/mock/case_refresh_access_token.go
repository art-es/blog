// Code generated by MockGen. DO NOT EDIT.
// Source: case_refresh_access_token.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/art-es/blog/internal/auth/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockaccessTokenRefresher is a mock of accessTokenRefresher interface.
type MockaccessTokenRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockaccessTokenRefresherMockRecorder
}

// MockaccessTokenRefresherMockRecorder is the mock recorder for MockaccessTokenRefresher.
type MockaccessTokenRefresherMockRecorder struct {
	mock *MockaccessTokenRefresher
}

// NewMockaccessTokenRefresher creates a new mock instance.
func NewMockaccessTokenRefresher(ctrl *gomock.Controller) *MockaccessTokenRefresher {
	mock := &MockaccessTokenRefresher{ctrl: ctrl}
	mock.recorder = &MockaccessTokenRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccessTokenRefresher) EXPECT() *MockaccessTokenRefresherMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockaccessTokenRefresher) Parse(token string) (*domain.AccessTokenObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", token)
	ret0, _ := ret[0].(*domain.AccessTokenObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockaccessTokenRefresherMockRecorder) Parse(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockaccessTokenRefresher)(nil).Parse), token)
}

// Refresh mocks base method.
func (m *MockaccessTokenRefresher) Refresh(object *domain.AccessTokenObject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh", object)
}

// Refresh indicates an expected call of Refresh.
func (mr *MockaccessTokenRefresherMockRecorder) Refresh(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockaccessTokenRefresher)(nil).Refresh), object)
}

// Sign mocks base method.
func (m *MockaccessTokenRefresher) Sign(object *domain.AccessTokenObject) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", object)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockaccessTokenRefresherMockRecorder) Sign(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockaccessTokenRefresher)(nil).Sign), object)
}
