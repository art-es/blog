// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/art-es/blog/internal/auth/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockUserRepository) Activate(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activate indicates an expected call of Activate.
func (mr *MockUserRepositoryMockRecorder) Activate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockUserRepository)(nil).Activate), ctx, id)
}

// EmailExists mocks base method.
func (m *MockUserRepository) EmailExists(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailExists", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailExists indicates an expected call of EmailExists.
func (mr *MockUserRepositoryMockRecorder) EmailExists(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailExists", reflect.TypeOf((*MockUserRepository)(nil).EmailExists), ctx, email)
}

// Exists mocks base method.
func (m *MockUserRepository) Exists(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUserRepositoryMockRecorder) Exists(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserRepository)(nil).Exists), ctx, id)
}

// Get mocks base method.
func (m *MockUserRepository) Get(ctx context.Context, id int64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), ctx, id)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), ctx, email)
}

// Save mocks base method.
func (m *MockUserRepository) Save(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserRepositoryMockRecorder) Save(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), ctx, user)
}

// MockActivationCodeRepository is a mock of ActivationCodeRepository interface.
type MockActivationCodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActivationCodeRepositoryMockRecorder
}

// MockActivationCodeRepositoryMockRecorder is the mock recorder for MockActivationCodeRepository.
type MockActivationCodeRepositoryMockRecorder struct {
	mock *MockActivationCodeRepository
}

// NewMockActivationCodeRepository creates a new mock instance.
func NewMockActivationCodeRepository(ctrl *gomock.Controller) *MockActivationCodeRepository {
	mock := &MockActivationCodeRepository{ctrl: ctrl}
	mock.recorder = &MockActivationCodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivationCodeRepository) EXPECT() *MockActivationCodeRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockActivationCodeRepository) Add(ctx context.Context, code string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, code, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockActivationCodeRepositoryMockRecorder) Add(ctx, code, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockActivationCodeRepository)(nil).Add), ctx, code, userID)
}

// GetUserID mocks base method.
func (m *MockActivationCodeRepository) GetUserID(ctx context.Context, code string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, code)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockActivationCodeRepositoryMockRecorder) GetUserID(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockActivationCodeRepository)(nil).GetUserID), ctx, code)
}

// RemoveCodes mocks base method.
func (m *MockActivationCodeRepository) RemoveCodes(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCodes", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCodes indicates an expected call of RemoveCodes.
func (mr *MockActivationCodeRepositoryMockRecorder) RemoveCodes(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCodes", reflect.TypeOf((*MockActivationCodeRepository)(nil).RemoveCodes), ctx, userID)
}

// MockrepositoryGetter is a mock of repositoryGetter interface.
type MockrepositoryGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryGetterMockRecorder
}

// MockrepositoryGetterMockRecorder is the mock recorder for MockrepositoryGetter.
type MockrepositoryGetterMockRecorder struct {
	mock *MockrepositoryGetter
}

// NewMockrepositoryGetter creates a new mock instance.
func NewMockrepositoryGetter(ctrl *gomock.Controller) *MockrepositoryGetter {
	mock := &MockrepositoryGetter{ctrl: ctrl}
	mock.recorder = &MockrepositoryGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepositoryGetter) EXPECT() *MockrepositoryGetterMockRecorder {
	return m.recorder
}

// ActivationCode mocks base method.
func (m *MockrepositoryGetter) ActivationCode() domain.ActivationCodeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivationCode")
	ret0, _ := ret[0].(domain.ActivationCodeRepository)
	return ret0
}

// ActivationCode indicates an expected call of ActivationCode.
func (mr *MockrepositoryGetterMockRecorder) ActivationCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivationCode", reflect.TypeOf((*MockrepositoryGetter)(nil).ActivationCode))
}

// User mocks base method.
func (m *MockrepositoryGetter) User() domain.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(domain.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockrepositoryGetterMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockrepositoryGetter)(nil).User))
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ActivationCode mocks base method.
func (m *MockRepository) ActivationCode() domain.ActivationCodeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivationCode")
	ret0, _ := ret[0].(domain.ActivationCodeRepository)
	return ret0
}

// ActivationCode indicates an expected call of ActivationCode.
func (mr *MockRepositoryMockRecorder) ActivationCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivationCode", reflect.TypeOf((*MockRepository)(nil).ActivationCode))
}

// BeginTx mocks base method.
func (m *MockRepository) BeginTx(arg0 context.Context) (domain.TxCommitter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0)
	ret0, _ := ret[0].(domain.TxCommitter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockRepositoryMockRecorder) BeginTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockRepository)(nil).BeginTx), arg0)
}

// User mocks base method.
func (m *MockRepository) User() domain.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(domain.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepositoryMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepository)(nil).User))
}

// MockTxCommitter is a mock of TxCommitter interface.
type MockTxCommitter struct {
	ctrl     *gomock.Controller
	recorder *MockTxCommitterMockRecorder
}

// MockTxCommitterMockRecorder is the mock recorder for MockTxCommitter.
type MockTxCommitterMockRecorder struct {
	mock *MockTxCommitter
}

// NewMockTxCommitter creates a new mock instance.
func NewMockTxCommitter(ctrl *gomock.Controller) *MockTxCommitter {
	mock := &MockTxCommitter{ctrl: ctrl}
	mock.recorder = &MockTxCommitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxCommitter) EXPECT() *MockTxCommitterMockRecorder {
	return m.recorder
}

// ActivationCode mocks base method.
func (m *MockTxCommitter) ActivationCode() domain.ActivationCodeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivationCode")
	ret0, _ := ret[0].(domain.ActivationCodeRepository)
	return ret0
}

// ActivationCode indicates an expected call of ActivationCode.
func (mr *MockTxCommitterMockRecorder) ActivationCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivationCode", reflect.TypeOf((*MockTxCommitter)(nil).ActivationCode))
}

// Commit mocks base method.
func (m *MockTxCommitter) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxCommitterMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxCommitter)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockTxCommitter) Rollback() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback")
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxCommitterMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTxCommitter)(nil).Rollback))
}

// User mocks base method.
func (m *MockTxCommitter) User() domain.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(domain.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockTxCommitterMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockTxCommitter)(nil).User))
}
