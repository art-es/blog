// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_activate.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/art-es/blog/internal/auth/domain"
	gomock "github.com/golang/mock/gomock"
)

// Mockactivator is a mock of activator interface.
type Mockactivator struct {
	ctrl     *gomock.Controller
	recorder *MockactivatorMockRecorder
}

// MockactivatorMockRecorder is the mock recorder for Mockactivator.
type MockactivatorMockRecorder struct {
	mock *Mockactivator
}

// NewMockactivator creates a new mock instance.
func NewMockactivator(ctrl *gomock.Controller) *Mockactivator {
	mock := &Mockactivator{ctrl: ctrl}
	mock.recorder = &MockactivatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockactivator) EXPECT() *MockactivatorMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *Mockactivator) Activate(ctx context.Context, code string, tx domain.TxCommitter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", ctx, code, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockactivatorMockRecorder) Activate(ctx, code, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*Mockactivator)(nil).Activate), ctx, code, tx)
}
