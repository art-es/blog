// Code generated by MockGen. DO NOT EDIT.
// Source: endpoint.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/art-es/blog/internal/auth/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockuserActivateCase is a mock of userActivateCase interface.
type MockuserActivateCase struct {
	ctrl     *gomock.Controller
	recorder *MockuserActivateCaseMockRecorder
}

// MockuserActivateCaseMockRecorder is the mock recorder for MockuserActivateCase.
type MockuserActivateCaseMockRecorder struct {
	mock *MockuserActivateCase
}

// NewMockuserActivateCase creates a new mock instance.
func NewMockuserActivateCase(ctrl *gomock.Controller) *MockuserActivateCase {
	mock := &MockuserActivateCase{ctrl: ctrl}
	mock.recorder = &MockuserActivateCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserActivateCase) EXPECT() *MockuserActivateCaseMockRecorder {
	return m.recorder
}

// Use mocks base method.
func (m *MockuserActivateCase) Use(ctx context.Context, in *dto.UserActivateIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockuserActivateCaseMockRecorder) Use(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockuserActivateCase)(nil).Use), ctx, in)
}
